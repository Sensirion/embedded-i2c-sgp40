/*
 * THIS FILE IS AUTOMATICALLY GENERATED
 *
 * I2C-Generator: 0.3.0
 * Yaml Version: 0.1.0
 * Template Version: 0.7.0-62-g3d691f9
 */
/*
 * Copyright (c) 2021, Sensirion AG
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of Sensirion AG nor the names of its
 *   contributors may be used to endorse or promote products derived from
 *   this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include "i2c_mux.h"
#include "sensirion_common.h"
#include "sensirion_i2c.h"
#include "sensirion_i2c_hal.h"
#include "sensirion_test_setup.h"
#include "sgp40_i2c.h"
#include <inttypes.h>
#include <stdio.h>

TEST_GROUP (SGP40_Tests) {
    void setup() {
        sensirion_i2c_hal_init();

        int16_t error = sensirion_i2c_mux_set_single_channel(0x71, 0);
        CHECK_EQUAL_ZERO_TEXT(error, "sensirion_i2c_mux_set_single_channel")
    }

    void teardown() {

        sensirion_i2c_hal_free();
    }
};

TEST (SGP40_Tests, SGP40_Test_measure_raw_signal) {
    int16_t error;
    uint16_t relative_humidity = 0;
    uint16_t temperature = 0;
    uint16_t sraw_voc;
    error = sgp40_measure_raw_signal(relative_humidity, temperature, &sraw_voc);
    CHECK_EQUAL_ZERO_TEXT(error, "sgp40_measure_raw_signal");
    printf("Sraw voc: %u\n", sraw_voc);
}

TEST (SGP40_Tests, SGP40_Test_execute_self_test) {
    int16_t error;
    uint16_t test_result;
    error = sgp40_execute_self_test(&test_result);
    CHECK_EQUAL_ZERO_TEXT(error, "sgp40_execute_self_test");
    printf("Test result: %u\n", test_result);
}

TEST (SGP40_Tests, SGP40_Test_turn_heater_off) {
    int16_t error;
    error = sgp40_turn_heater_off();
    CHECK_EQUAL_ZERO_TEXT(error, "sgp40_turn_heater_off");
}

TEST (SGP40_Tests, SGP40_Test_get_serial_number) {
    int16_t error;
    uint16_t serial_number[42];
    uint8_t serial_number_size = 42;
    error = sgp40_get_serial_number(&serial_number[0], serial_number_size);
    CHECK_EQUAL_ZERO_TEXT(error, "sgp40_get_serial_number");
    printf("Serial number: ");
    for (size_t i = 0; i < serial_number_size; i++) {
        printf("%u, ", serial_number[i]);
    }
    printf("\n");
}
